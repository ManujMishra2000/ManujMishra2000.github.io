{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Navbar","navNum","this","props","num","className","id","text","goTo","setPage","React","Component","NavItem","handleSetActive","activeClass","to","spy","smooth","duration","onSetActive","LandingPage","Tagline","line","About","href","target","mainName","londonName","tajName","App","state","currentPage","changePage","bind","pageName","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAIMA,G,6KAEF,IAAIC,EAAS,aAAeC,KAAKC,MAAMC,IACvC,OACE,yBAAKC,UAAWJ,EAAQK,GAAMJ,KAAKC,MAAMG,IACvC,yBAAKD,UAAY,iBACjB,kBAAC,EAAD,CAASE,KAAO,OAAOC,KAAO,OAAOC,QAAWP,KAAKC,MAAMM,UAC3D,kBAAC,EAAD,CAASF,KAAO,QAAQC,KAAO,OAAOC,QAAWP,KAAKC,MAAMM,UAC5D,kBAAC,EAAD,CAASF,KAAO,UAAUC,KAAO,OAAOC,QAAWP,KAAKC,MAAMM,e,GARjDC,IAAMC,YAcrBC,E,4MACJC,gBAAkB,kBAAM,EAAKV,MAAMM,QAAQ,EAAKN,MAAMI,O,uDAEpD,OACE,yBAAKF,UAAY,WACf,kBAAC,OAAD,CAAMS,YAAY,SACZC,GAAIb,KAAKC,MAAMK,KACfQ,KAAK,EACLC,OAAQ,iBACRC,SAAU,IACVC,YAAajB,KAAKW,iBAErBX,KAAKC,MAAMI,W,GAZAG,IAAMC,WAmBtBS,E,uKAEF,OACE,yBAAKf,UAAY,0BACf,yBAAKA,UAAY,oBACjB,kBAACgB,EAAD,CAASC,KAAK,kBACd,yBAAKjB,UAAY,yB,GANCK,IAAMC,WAY1BY,E,uKAEF,OACE,yBAAKlB,UAAY,SACf,yBAAKA,UAAY,kBACf,qCACA,uHACA,wCAAa,uBAAGmB,KAAO,qCAAqCC,OAAO,UAAtD,UAAb,eAAkG,uBAAGA,OAAO,UAAV,aAAlG,eACA,wGAEF,yBAAKpB,UAAS,kBAAeH,KAAKC,MAAMuB,YACxC,yBAAKrB,UAAS,iBAAcH,KAAKC,MAAMwB,cACvC,yBAAKtB,UAAS,cAAWH,KAAKC,MAAMyB,gB,GAZxBlB,IAAMC,WAkB1B,SAASU,EAAQlB,GACf,OACE,yBAAKE,UAAY,mBACdF,EAAMmB,M,IAqCEO,E,kDA/Bb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CAACC,YAAa,QAC3B,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAHD,E,uDAMRC,GACThC,KAAKiC,SAAS,CACZJ,YAAaG,M,+BAKf,IAAIR,EAAqC,SAA1BxB,KAAK4B,MAAMC,YAAyB,SAAW,cAC1DJ,EAAuC,SAA1BzB,KAAK4B,MAAMC,YAAyB,YAAc,cAC/DH,EAAoC,SAA1B1B,KAAK4B,MAAMC,YAAyB,aAAe,cACjE,OACE,yBAAK1B,UAAU,6BACb,kBAAC,EAAD,CAAQD,IAAM,IAAIE,GAAK,OAAOG,QAAWP,KAAK8B,aAC9C,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQ5B,IAAM,IAAIE,GAAK,OAAOG,QAAWP,KAAK8B,aAC9C,kBAAC,EAAD,CAAON,SAAYA,EAAUC,WAAcA,EAAYC,QAAWA,IAClE,kBAAC,EAAD,CAAQxB,IAAM,IAAIE,GAAK,OAAOG,QAAWP,KAAK8B,aAC9C,yBAAK3B,UAAY,WACf,2E,GAzBQK,IAAMC,WC/DJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.676ce386.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-scroll'\nimport './App.css';\n\nclass Navbar extends React.Component {\n  render() {\n    let navNum = \"Navbar Nav\" + this.props.num;\n    return (\n      <div className={navNum} id = {this.props.id}>\n        <div className = \"NavLeftBlock\"/>\n        <NavItem text = \"Home\" goTo = \"nav1\" setPage = {this.props.setPage}/>\n        <NavItem text = \"About\" goTo = \"nav2\" setPage = {this.props.setPage}/>\n        <NavItem text = \"Contact\" goTo = \"nav3\" setPage = {this.props.setPage}/>\n      </div>\n    )\n  }\n}\n\nclass NavItem extends React.Component {\n  handleSetActive = () => this.props.setPage(this.props.text)\n  render() {\n    return (\n      <div className = \"NavItem\">\n        <Link activeClass=\"Active\"\n              to={this.props.goTo}\n              spy={true}\n              smooth= \"easeInOutCubic\"\n              duration={900}\n              onSetActive={this.handleSetActive}\n              >\n          {this.props.text}\n        </Link>\n      </div>\n    )\n  }\n}\n\nclass LandingPage extends React.Component {\n  render() {\n    return (\n      <div className = \"LandingPage ScreenHigh\">\n        <div className = \"LandingTopBlock\"/>\n        <Tagline line=\"web developer\"/>\n        <div className = \"LandingBotBlock\"/>\n      </div>\n    )\n  }\n}\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div className = \"About\">\n        <div className = \"AboutLeftBlock\">\n          <p>0. Hi!</p>\n          <p>1. I'm Manuj, a first year maths and computer science student at Imperial College London</p>\n          <p>2. I love <a href = \"https://github.com/ManujMishra2000\" target=\"_blank\">making</a> things and <a target=\"_blank\">exploring</a> the world.</p>\n          <p>3. In my spare time, I dance, play piano, and make videos about music :)</p>\n        </div>\n        <div className = {`SuitPic ${this.props.mainName}`}/>\n        <div className = {`London ${this.props.londonName}`} />\n        <div className = {`Taj ${this.props.tajName}`} />\n      </div>\n    )\n  }\n}\n\nfunction Tagline(props) {\n  return (\n    <div className = \"Tagline Tagfont\">\n      {props.line}\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {currentPage: \"Home\"};\n    this.changePage = this.changePage.bind(this);\n  }\n\n  changePage(pageName) {\n    this.setState({\n      currentPage: pageName\n    })\n  }\n\n  render() {\n    var mainName = this.state.currentPage == \"About\" ? \"Appear\" : \"Transparent\";\n    var londonName = this.state.currentPage == \"About\" ? \"SlideLeft\" : \"Transparent\";\n    var tajName = this.state.currentPage == \"About\" ? \"SlideRight\" : \"Transparent\";\n    return (\n      <div className=\"All ScreenWide BackColour\">\n        <Navbar num = \"1\" id = \"nav1\" setPage = {this.changePage}/>\n        <LandingPage/>\n        <Navbar num = \"2\" id = \"nav2\" setPage = {this.changePage}/>\n        <About mainName = {mainName} londonName = {londonName} tajName = {tajName}/>\n        <Navbar num = \"3\" id = \"nav3\" setPage = {this.changePage}/>\n        <div className = \"Contact\">\n          <p>Email me at: manujmishra2000@gmail.com</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}